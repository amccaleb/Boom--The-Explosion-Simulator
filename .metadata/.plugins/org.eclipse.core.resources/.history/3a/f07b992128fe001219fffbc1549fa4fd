/**
 * Alexander McCaleb
 * CMPS 179 - Summer 2013
 * Boom -- The Explosion Simulator
 *
 * Game.js
 *
 * Game object
 * The highest level object representing entire game
 *
 * Based on code provided by Nathan Whitehead at:
 * http://nathansuniversity.com/cmps179/presentations/demo/tex9.html
 *
 */

/**
 * Constructs a new game
 */
var Game = function() {
	// Set up the renderer as we should only do this on creation
	this.renderer = new THREE.WebGLRenderer({
		antialias : true
	});
	this.renderer.setSize(800, 600);
	this.renderer.setClearColor(0xeeeeee, 1.0);
	document.body.appendChild(this.renderer.domElement);
};

/**
 * Reset the game state
 */
Game.prototype.reset = function() {
	this.init();
	this.start();
}
/**
 * Initialize game state
 */
Game.prototype.init = function() {
	var that = this;

	// Initialize the system dynamics models
	this.simulation = new SDModel("Chemical Sim");

	// Initialize the camera
	this.camera = new THREE.PerspectiveCamera(75, 4.0 / 3.0, 1, 10000);
	this.camera.position.y = -500;
	this.camera.position.z = 500;

	this.scene = new THREE.Scene();

	// Create the Skybox
	this.skybox = new Skybox();
	this.scene.add(this.skybox.object);

	// Spotlight
	var spotlight = new THREE.PointLight(0xffffff, 1, 1000);
	spotlight.position.set(0, -100, 300);
	this.scene.add(spotlight);
	// Ambient light
	var ambient_light = new THREE.AmbientLight(0x202020);
	this.scene.add(ambient_light);

	// Setup keyboard events
	this.keys = {};
	$('body').keydown(function(e) {
		if (e.which) {
			if (that.keys[e.which] !== 'triggered') {
				that.keys[e.which] = true;
			}
		}
	});
	$('body').keyup(function(e) {
		if (e.which) {
			that.keys[e.which] = false;
		}
	});

};

/**
 * Render game view for time t
 */
Game.prototype.render = function(t) {

	var that = this;

	// Look at the scene and render
	this.camera.lookAt(this.scene.position);
	this.renderer.render(this.scene, this.camera);
};

/**
 * Allows the game to respond to user input
 */
Game.prototype.handleInput = function() {
	// Spacebar
	if (this.keys[32] === true) {
		this.keys[32] = 'triggered';

	}
};

/**
 * Start main game loop
 */
Game.prototype.start = function() {
	var that = this;
	this.time0 = new Date().getTime();
	// milliseconds since 1970
	var loop = function() {
		var time = new Date().getTime();
		that.render((time - this.time0) * 0.001);
		// Respond to user input
		that.handleInput();
		requestAnimationFrame(loop, that.renderer.domElement);
	};
	loop();
};
